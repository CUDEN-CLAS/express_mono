<?php

/**
 * Implements hook_install().
 *
 * Creates a set of default users with specified roles.
 */
function cu_users_install() {
  // High module weight in order to come after every module that we declare
  // permissions for.
  db_query("UPDATE {system} SET weight = 99 WHERE name = 'cu_users'");

  $developer_role = user_role_load_by_name('developer');
  $administrator_role = user_role_load_by_name('administrator');
  $site_owner_role = user_role_load_by_name('site_owner');
  $content_editor_role = user_role_load_by_name('content_editor');
  $edit_own_role = user_role_load_by_name('edit_my_content');

  // Create default users keyed by role id.
  $default_users = array(
    $developer_role->rid => cu_users_get_users('developer'),
    $administrator_role->rid => cu_users_get_users('administrator'),
	  $site_owner_role->rid => cu_users_get_users('site_owner'),
	  $content_editor_role->rid => cu_users_get_users('content_editor'),
	  $edit_own_role->rid => cu_users_get_users('edit_my_content'),
  );

  foreach ($default_users as $rid => $users) {
    foreach ($users as $name => $mail) {
      // Create the account.
      $account = new stdClass();
      $account->name = $name;
      $account->mail = $mail;
      $account->status = 1;
      $account = user_save($account);

      // Grant user the role.
      $query = db_insert('users_roles')->fields(array('uid', 'rid'));
      $query->values(array('uid' => $account->uid, 'rid' => $rid));
      $query->execute();
    }
  }
}

/**
 * Set module weight for pre-1.0 sites.
 */
function cu_users_update_7010() {
  db_query("UPDATE {system} SET weight = 99 WHERE name = 'cu_users'");
  return TRUE;
}

/**
 * Create administrator drupalcs user and change sniderc's role to developer.
 
function cu_users_update_7011() {
  // If druaplcs user does not exist.
  $drupalcs_account = user_load_by_name('drupalcs');
  if (!isset($drupalcs_account->uid)) {
    // Create new drupalcs user.
    $account = new stdClass();
    $account->name = 'drupalcs';
    $account->mail = 'drupalcs@colorado.edu';
    $account->status = 1;
    $account = user_save($account);

    // Grant administrator role to drupalcs.
    $administrator_role = user_role_load_by_name('administrator');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $administrator_role->rid));
    $query->execute();
  }

  // Remove administrator role from sniderc.
  $sniderc_account = user_load_by_name('sniderc');
  $query = db_delete('users_roles')
    ->condition('uid', $sniderc_account->uid)
    ->condition('rid', $administrator_role->rid)
    ->execute();

  // To avoid an Integrity constraint violation if sniderc happens to already
  // have developer role, query first.
  $developer_role = user_role_load_by_name('developer');
  $result = db_select('users_roles', 'ur')
    ->fields('ur', array('uid'))
    ->condition('uid', $sniderc_account->uid, '=')
    ->condition('rid', $developer_role->rid, '=')
    ->execute()
    ->fetchAssoc();

  // If no developer role, grant developer role to sniderc's account.
  if (empty($result)) {
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $sniderc_account->uid, 'rid' => $developer_role->rid));
    $query->execute();
  }
}
*/

/**
 * Create table for user invites.
 */
function cu_users_update_7012() {
  drupal_install_schema('cu_users');
}

/**
 * Add Erin Corson as a developer.
 */
function cu_users_update_7013() {
  // If hendmark user does not exist.
  $new_account = user_load_by_name('hendmark');
  if (!isset($new_account->uid)) {
    // Create new user.
    $account = new stdClass();
    $account->name = 'hendmark';
    $account->mail = 'Mark.Hendricks@ucdenver.edu';
    $account->status = 1;
    $account = user_save($account);

    $developer_role = user_role_load_by_name('developer');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $developer_role->rid));
    $query->execute();
  }
}

/**
 * Add Tim Stalker as a developer.
 */
function cu_users_update_7014() {
  // If stalkert user does not exist.
  $new_account = user_load_by_name('stalkert');
  if (!isset($new_account->uid)) {
    // Create new user.
    $account = new stdClass();
    $account->name = 'stalkert';
    $account->mail = 'Tim.Stalker@ucdenver.edu';
    $account->status = 1;
    $account = user_save($account);

    $developer_role = user_role_load_by_name('developer');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $developer_role->rid));
    $query->execute();
  }
}

/**
 * Add Tracy Kohm as a site owner.
 */
function cu_users_update_7015() {
  // If kohmt user does not exist.
  $new_account = user_load_by_name('kohmt');
  if (!isset($new_account->uid)) {
    // Create new user.
    $account = new stdClass();
    $account->name = 'kohmt';
    $account->mail = 'Tracy.Kohm@ucdenver.edu';
    $account->status = 1;
    $account = user_save($account);

    $site_owner_role = user_role_load_by_name('site_owner');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $site_owner_role->rid));
    $query->execute();
  }
}

/**
 * Set role weight by increasing permissions so site_owner and admin are easier to compare
 */
function cu_users_update_7018() {

  $role = user_role_load_by_name('content_editor');
  $role->weight = 2;
  user_role_save($role);

  $role = user_role_load_by_name('site_owner');
  $role->weight = 3;
  user_role_save($role);

  $role = user_role_load_by_name('administrator');
  $role->weight = 4;
  user_role_save($role);

  $role = user_role_load_by_name('developer');
  $role->weight = 5;
  user_role_save($role);

}

/**
 * Breaking module up into 3; renaming cu_users_invite table to user_external_invite
 */
function cu_users_update_7019() {
  if (db_table_exists('cu_users_invite')) {
    db_rename_table('cu_users_invite', 'user_external_invite');
  }
  // Enable new modules
  module_enable(array(
    'user_external_invite',
    'cu_permissions',
  ));
}

/**
 * Add Emily as an administrator.
 
function cu_users_update_7020() {
  // If new user does not exist.
  $new_account = user_load_by_name('mortone');
  if (!isset($new_account->uid)) {
    // Create new user.
    $account = new stdClass();
    $account->name = 'mortone';
    $account->mail = 'Emily.Kellagher@Colorado.EDU';
    $account->status = 1;
    $account = user_save($account);

    $admin_role = user_role_load_by_name('administrator');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $admin_role->rid));
    $query->execute();
  }
}
*/

/**
 * Remove Boulder Users
 */
 function cu_users_update_7021() {
   
   $kcrafts = user_load_by_name('crafts');
   user_cancel(array(), $kcrafts->uid, 'user_cancel_reassign');
   
   $reynen = user_load_by_name('kere7580');
   user_cancel(array(), $reynen->uid, 'user_cancel_reassign');
   
   $fuller = user_load_by_name('jafu6031');
   user_cancel(array(), $fuller->uid, 'user_cancel_reassign');
   
   $finnan = user_load_by_name('alfi2595');
   user_cancel(array(), $finnan->uid, 'user_cancel_reassign');
   
   $brokawuser = user_load_by_name('brokaw');
   user_cancel(array(), $brokawuser->uid, 'user_cancel_reassign');
   
   $leslieuser = user_load_by_name('leslie');
   user_cancel(array(), $leslieuser->uid, 'user_cancel_reassign');
   
   $linebarguser = user_load_by_name('linebarg');
   user_cancel(array(), $linebarguser->uid, 'user_cancel_reassign');
   
   $wetu1300user = user_load_by_name('wetu1300');
   user_cancel(array(), $wetu1300user->uid, 'user_cancel_reassign');
   
   $mortoneuser = user_load_by_name('mortone');
   user_cancel(array(), $mortoneuser->uid, 'user_cancel_reassign');
   
   $owen = user_load_by_name('owmo7772');
   user_cancel(array(), $owen->uid, 'user_cancel_reassign');
   
   $snider = user_load_by_name('sniderc');
   user_cancel(array(), $snider->uid, 'user_cancel_reassign');
   
   $tcox = user_load_by_name('thco6272');
   user_cancel(array(), $snider->uid, 'user_cancel_reassign');
   
 }

/**
 * Add test users for edit-my-content, content-editor and site-owner
 */
function cu_users_update_7023() {
  // If edit-own-content user does not exist.
  $new_account = user_load_by_name('osr-test-edit-own');
  if (!isset($new_account->uid)) {
    // Create new edit-own-content user.
    $account = new stdClass();
    $account->name = 'osr-test-edit-own';
    $account->mail = 'osr-test-edit-own@ucdenver.edu';
    $account->status = 1;
    $account = user_save($account);

    $edit_own_role = user_role_load_by_name('edit_my_content');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $edit_own_role->rid));
    $query->execute();
  }

   // If content-editor user does not exist.
  $new_account = user_load_by_name('osr-test-content');
  if (!isset($new_account->uid)) {
    // Create new content-editor user.
    $account = new stdClass();
    $account->name = 'osr-test-content';
    $account->mail = 'osr-test-content@ucdenver.edu';
    $account->status = 1;
    $account = user_save($account);

    $content_editor_role = user_role_load_by_name('content_editor');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $content_editor_role->rid));
    $query->execute();
  }

   // If site-owner user does not exist.
  $new_account = user_load_by_name('osr-test-owner');
  if (!isset($new_account->uid)) {
    // Create new site-owner user.
    $account = new stdClass();
    $account->name = 'osr-test-owner';
    $account->mail = 'osr-test-owner@ucdenver.edu';
    $account->status = 1;
    $account = user_save($account);

    $site_owner_role = user_role_load_by_name('site_owner');
    $query = db_insert('users_roles')->fields(array('uid', 'rid'));
    $query->values(array('uid' => $account->uid, 'rid' => $site_owner_role->rid));
    $query->execute();
  }
}

/**
 * Update user_external_invite email template for when invite is first sent.
 */
function cu_users_update_7025() {
  variable_set('user_external_invite_confirmation_template', 'We have received your request to grant [user_external_invite:invite_core_role] access to the following users:

[user_external_invite:invited_emails]

An email invitation has been sent requesting the user to login to [site:url] and accept the invitation. Upon completion, a confirmation email will be sent.

If you did not submit this request or need to modify it, please contact us at clas-web-support@ucdenver.edu.

--
The CLAS Web Express Team
http://clas.ucdenver.edu/web-support
clas-web-support@ucdenver.edu');
}

/**
 * Delete user URL aliases and redirects.
 */
function cu_users_update_7027() {
  db_delete('url_alias')
    ->condition('source', db_like('user/') . '%', 'LIKE')
    ->execute();

  db_delete('redirect')
    ->condition('source', db_like('users/') . '%', 'LIKE')
    ->execute();
}

/**
 * Re-add invite roles for 2.9.0 additions.
 */
function cu_users_update_7028() {

  module_load_install('ucd_core');
  ucd_set_external_invite_variables();
}

/**
 * Increase module weight so that cu_users_pathauto_pattern_alter() happens in the correct order.
 */
function cu_users_update_7029() {
  // High module weight in order to come after every module that we declare
  // permissions for.
  db_query("UPDATE {system} SET weight = 99 WHERE name = 'cu_users'");
}

/**
 * Correct invite email templates for addon role code changes.
 */
function cu_users_update_7030() {
  module_load_install('ucd_core');
  ucd_set_external_invite_variables();
}

/**
 * Correct invite email templates for login link.
 */
function cu_users_update_7031() {
  module_load_install('ucd_core');
  ucd_set_external_invite_variables();
}

/**
 * Remove Owen Morrill as a user, if he exists.
 */
function cu_users_update_7032() {
  $user = user_load_by_name('owmo7772');
  if($user){
    user_cancel(array(), $user->uid, 'user_cancel_reassign');
  }
  watchdog('cu_users', t('Removed owmo7772 from list of users on sites'));
}
